'''
Los siguientes modelos fueron planteados mas no utilizados.
Si quiere verlos reflejados descomente su renderizacion en
admin.py y agregelos al archivo models.py. No obstante, el
programa wasn't design para utilizarlos por lo que se advierte
el no utilizarlos. Igual se mantienen con el fin de quizas
experimentar luego con ellas.
Se plantearon con la idea de tener un modelo que
represente cada estilo de prenda. Ya que por ejemplo, si
bien algunas prendas pueden tener atributos similares, hay
cosas que cambian para cada uno, como los pantalones por
ejemplo, que tienen un sentido de talla distinto.


class Vestido(models.Model):
    nombre = models.CharField(
            max_length=50,
            unique=True,
            help_text='Ingrese el nombre del articulo.'
        )

    estilo = models.ManyToManyField(
            Estilo,
            help_text='Seleccione el o los estilos de este articulo.'
        )

    marca = models.ForeignKey(
        Marca,
        on_delete=models.SET_NULL,
        null=True,
        help_text='Seleccione la marca de este articulo.'
    )

    descripcion = models.CharField(
        max_length=100,
        help_text='Agregue una descripcion al articulo.'
    )

    TALLA_VESTIDOS = (
            ('XS', 'Extra Small'),
            ('S', 'Small'),
            ('M', 'Medium'),
            ('L', 'Large'),
            ('XL', 'Extra Large'),
        )

    talla = models.CharField(
            max_length=2,
            choices=TALLA_VESTIDOS,
            default='XS',
            blank=True,
            help_text='Talla del producto'
        )

    class Meta:
        ordering = ['nombre', 'talla', 'marca']

    # Django restringe el display de ManyToManyField
    # por ende hay que dar una representacion en str
    # ForeignKey si se puede desplegar sin extras
    def display_estilo(self):
        return ', '.join([estilo.style for estilo in self.estilo.all()[:3]])

    display_estilo.short_description = 'Estilo'

    # para retornar un url especifico del modelo
    def get_absolute_url(self):
        return reverse('detalle-vestido', args=[str(self.id)])

    # string que representa al modelo
    def __str__(self):
        return self.nombre


class Blusa(models.Model):
    nombre = models.CharField(
            max_length=50,
            unique=True,
            help_text='Ingrese el nombre del articulo.'
        )

    estilo = models.ManyToManyField(
            Estilo,
            help_text='Seleccione el o los estilos de este articulo.'
        )

    marca = models.ForeignKey(
            Marca,
            on_delete=models.SET_NULL,
            null=True,
            help_text='Seleccione la marca de este articulo.'
        )

    descripcion = models.CharField(
            max_length=100,
            help_text='Agregue una descripcion al articulo'
        )

    TALLA_BLUSA = (
            ('XS', 'Extra Small'),
            ('S', 'Small'),
            ('M', 'Medium'),
            ('L', 'Large'),
            ('XL', 'Extra Large'),
        )

    talla = models.CharField(
            max_length=2,
            choices=TALLA_BLUSA,
            default='XS',
            blank=True,
            help_text='Talla del producto'
        )

    class Meta:
        ordering = ['nombre', 'talla', 'marca']

    def display_estilo(self):
        return ', '.join([estilo.style for estilo in self.estilo.all()[:3]])
    display_estilo.short_description = 'Estilo'

    # para retornar un url especifico del modelo
    def get_absolute_url(self):
        return reverse('detalle-blusa', args=[str(self.id)])

    # string que representa al modelo
    def __str__(self):
        return self.nombre


class Pantalon(models.Model):
    nombre = models.CharField(
            max_length=50,
            unique=True,
            help_text='Ingrese el nombre del articulo.'
        )

    estilo = models.ManyToManyField(
            Estilo,
            help_text='Seleccione el o los estilos de este articulo.'
        )

    marca = models.ForeignKey(
            Marca,
            on_delete=models.SET_NULL,
            null=True,
            help_text='Seleccione la marca de este articulo.'
        )

    descripcion = models.CharField(
            max_length=100,
            help_text='Agregue una descripcion al articulo.'
        )

    TALLA_PANTS = (
            ('0', 'Talla 0'),
            ('1', 'Talla 1'),
            ('3', 'Talla 3'),
            ('5', 'Talla 5'),
            ('9', 'Talla 9'),
        )

    talla = models.CharField(
            max_length=1,
            choices=TALLA_PANTS,
            default='XS',
            blank=True,
            help_text='Talla del producto'
        )

    class Meta:
        ordering = ['nombre', 'talla', 'marca']

    def display_estilo(self):
        return ', '.join([estilo.style for estilo in self.estilo.all()[:3]])
    display_estilo.short_description = 'Estilo'

    # para retornar un url especifico del modelo
    def get_absolute_url(self):
        return reverse('detalle-pantalon', args=[str(self.id)])

    # string que representa al modelo
    def __str__(self):
        return self.nombre


class VestidoInstance(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        unique=True,
        help_text='ID unico del articulo.'
    )

    vestido = models.ForeignKey(
        'Vestido',
        on_delete=models.RESTRICT,
        null=True)

    comprador = models.ForeignKey(
        User,
        null=True,
        blank=True,
        on_delete=models.SET_NULL
    )

    ENCARGO_STATUS = (
        ('a', 'Disponible'), 
        ('w', 'En solicitud'), 
        ('d', 'Declinado'), 
        ('c', 'Comprado'),
    )

    status = models.CharField(
        max_length=1,
        choices=ENCARGO_STATUS,
        blank=True,
        default='a',
        help_text='Talla del producto'
    )

    # para retornar un url especifico del modelo
    def get_absolute_url(self):
        return reverse('detalle-instanciavestido', args=[str(self.id)])

    # string que representa al modelo
    def __str__(self):
        return '{0} ({1})'.format(self.id, self.vestido.nombre)


class BlusaInstance(models.Model):
    id = models.UUIDField(
            primary_key=True,
            default=uuid.uuid4,
            unique=True,
            help_text='ID unico del articulo.'
        )

    blusa = models.ForeignKey('Blusa', on_delete=models.RESTRICT, null=True)

    comprador = models.ForeignKey(
            User,
            null=True,
            blank=True,
            on_delete=models.SET_NULL
        )

    ENCARGO_STATUS = (
            ('a', 'Disponible'),
            ('w', 'En solicitud'),
            ('d', 'Declinado'),
            ('c', 'Comprado'),
        )

    status = models.CharField(
            max_length=1,
            choices=ENCARGO_STATUS,
            blank=True,
            default='a',
            help_text='Talla del producto'
        )

    # para retornar un url especifico del modelo
    def get_absolute_url(self):
        return reverse('detalle-instanciablusa', args=[str(self.id)])

    # string que representa al modelo
    def __str__(self):
        return '{0} ({1})'.format(self.id, self.blusa.nombre)


class PantalonInstance(models.Model):
    id = models.UUIDField(
            primary_key=True,
            default=uuid.uuid4,
            unique=True,
            help_text='ID unico del articulo.'
        )

    pantalon = models.ForeignKey('Pantalon', on_delete=models.RESTRICT, null=True)

    comprador = models.ForeignKey(
            User,
            null=True,
            blank=True,
            on_delete=models.SET_NULL
        )

    ENCARGO_STATUS = (
            ('a', 'Disponible'),
            ('w', 'En solicitud'),
            ('d', 'Declinado'),
            ('c', 'Comprado'),
        )

    status = models.CharField(
            max_length=1,
            choices=ENCARGO_STATUS,
            blank=True,
            default='a',
            help_text='Talla del producto'
        )

    # para retornar un url especifico del modelo
    def get_absolute_url(self):
        return reverse('detalle-instanciapantalon', args=[str(self.id)])

    # string que representa al modelo
    def __str__(self):
        return '{0} ({1})'.format(self.id, self.pantalon.nombre)
'''